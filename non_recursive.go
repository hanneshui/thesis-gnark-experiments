package main

import (
	"bytes"
	"fmt"

	"github.com/consensys/gnark-crypto/ecc"
	"github.com/consensys/gnark/backend/groth16"
	"github.com/consensys/gnark/std/algebra/native/twistededwards"
	stdgroth16 "github.com/consensys/gnark/std/recursion/groth16"
	"github.com/consensys/gnark/std/signature/eddsa"
)

func NonRecursive_BLS12_377() {
	print("------------------------------------------------\n")
	print("Curve BLS12_377\n")
	//circuit 1 compute proof
	print("Circuit 1\n")
	//assignments
	assignment1 := &Circuit1{
		X1:  "2585690560765377714820150516780496525626299280834382126014056601343495264828",
		X2:  "5723314072648994917715735901255749282591600725873466147641967501831164231964",
		X3:  "4837705174467728318490563814897266391273192880073545142717072432383024977836",
		W1:  4,
		W2:  20,
		W3:  6,
		W4:  7,
		W5:  8,
		W6:  9,
		W7:  10,
		W8:  11,
		W9:  12,
		W10: 13,
		W11: 14,
		W12: 15,
		W13: 16,
		W14: 17,
		W15: "1870167978923072168062518720560234004128912238941371553587596331349824329015",
		W16: 19,
	}

	_, innerVK, innerWitness, innerProof := ComputeProofC1(ecc.BLS12_377.ScalarField(), ecc.BW6_761.ScalarField(), assignment1, false)
	//circuit 1 verify proof
	err := groth16.Verify(innerProof, innerVK, innerWitness, stdgroth16.GetNativeVerifierOptions(ecc.BLS12_377.ScalarField(), ecc.BW6_761.ScalarField()))
	if err != nil {
		panic(err)
	}
	//print size of the proof
	var bufcircuit1 bytes.Buffer
	//write the proof to the buffer
	_, err = innerProof.WriteTo(&bufcircuit1)
	if err != nil {
		fmt.Println("Error writing proof to buffer:", err)
		panic(err)
	}
	fmt.Println("Size of the proof: ", bufcircuit1.Len())
	//print separator line
	print("------------------------------------------------\n")
	//circuit 2 compute proof
	print("Circuit 2\n")
	assignment2 := &Circuit2{
		X1: "6752855449231056321267693814255816381488594393943282535305674286289946722249", // Message
		X2: eddsa.PublicKey{
			A: twistededwards.Point{
				X: "8313108389828320643876668317341381733739848512650973615802431996739702191373",
				Y: "3682713017757992271155008825503072861837087085171901279573340560359067658758",
			},
		},
		W1: []byte("Hello, World!"),
		W2: []byte("Hello, World!2"),
		W3: "3",
		W4: eddsa.Signature{
			R: twistededwards.Point{
				X: "1281949276427518828308014773915118140357715152061955838718817705390312438534",
				Y: "2573843223670007272732953050834879914798531473627700698910346755612322787202",
			},
			S: "1884812387803760406244502024355425642054199848611821890027218951838594509979",
		},
		W5: eddsa.Signature{
			R: twistededwards.Point{
				X: "1104123814700516750588924664666145146275761015855220126221744492863160970085",
				Y: "1112175371932101329414576557723878185604846552869661807131740784072165046634",
			},
			S: "1866522081720066226851219528936262187368278513466235759453193967435186501241",
		},
	}

	_, innerVK, innerWitness, innerProof = ComputeProofC2(ecc.BLS12_377.ScalarField(), ecc.BW6_761.ScalarField(), assignment2)
	//circuit 2 verify proof
	err = groth16.Verify(innerProof, innerVK, innerWitness, stdgroth16.GetNativeVerifierOptions(ecc.BLS12_377.ScalarField(), ecc.BW6_761.ScalarField()))
	if err != nil {
		panic(err)
	}
	//print size of the proof
	var bufcircuit2 bytes.Buffer
	//write the proof to the buffer
	_, err = innerProof.WriteTo(&bufcircuit2)
	if err != nil {
		fmt.Println("Error writing proof to buffer:", err)
		panic(err)
	}
	fmt.Println("Size of the proof: ", bufcircuit2.Len())
	//print separator line
	print("------------------------------------------------\n")
	//circuit 3 compute proof
	print("Circuit 3\n")
	//assignments
	assignment3 := &Circuit3{
		X1:  "6145395493319860668016347858812770023447391082436850637703433811806758341511",
		X2:  "5372639291451818191628987971947498365897136915661242063962020082645469306801",
		X3:  "8345064698512194671820687215336905882316691669657975833564912000222358771005",
		X4:  "7193178607344504405033547753993836694880653173395268524234673070771134267976",
		X5:  "4470461308091089130206224251448025469810378595018440458704326590797798857468",
		X6:  "6678246761406175258780843413326922193135114407360689709273849331117234373107",
		X7:  "404268763070835680098199600806499381383582390909982678960256342138818824701",
		X8:  "7800794953392462079499146387957727784082229373277763367558211409960449038486",
		X9:  "3813367346515062057786064786175867430784407238287162962484267606493514556446",
		X10: "103840650972614095218186489191658409275860437069492911412866216372461777589",
		X11: "8379283844860220163200588286960265411268953736637398172518451003624827184815",
		X12: "1185798057684030474461723028914009299616366893216765321233978167021139648151",
		X13: "7103504771694579947117871628393826689850941901823538587067000859551996443317",
		X14: "2809685179282062738493635545329192261563591593943848057921088601367957607774",
		X15: "3439877582322744870714553984007157217861225243070424161034745220887004085255",
		W1:  1,
		W2:  2,
		W3:  3,
		W4:  4,
		W5:  5,
		W6:  6,
		W7:  7,
		W8:  8,
		W9:  9,
		W10: 10,
		W11: 11,
		W12: 12,
		W13: 13,
		W14: 14,
		W15: 0,
	}
	_, innerVK, innerWitness, innerProof = ComputeProofC3(ecc.BLS12_377.ScalarField(), ecc.BW6_761.ScalarField(), assignment3, false)
	//circuit 3 verify proof
	err = groth16.Verify(innerProof, innerVK, innerWitness, stdgroth16.GetNativeVerifierOptions(ecc.BLS12_377.ScalarField(), ecc.BW6_761.ScalarField()))
	if err != nil {
		panic(err)
	}
	//print size of the proof
	var bufcircuit3 bytes.Buffer
	//write the proof to the buffer
	_, err = innerProof.WriteTo(&bufcircuit3)
	if err != nil {
		fmt.Println("Error writing proof to buffer:", err)
		panic(err)
	}
	fmt.Println("Size of the proof: ", bufcircuit3.Len())

	//print separator line
	print("------------------------------------------------\n")
	//circuit 4 compute proof
	print("Circuit 4\n")
	//assignments
	assignment4 := &Circuit4{
		X1:  "1",
		X2:  "2",
		X3:  "3",
		X4:  "4",
		X5:  "5",
		X6:  "6",
		X7:  "7",
		X8:  "8",
		X9:  "9",
		X10: "10",
		X11: "11",
		X12: "12",
		X13: "13",
		X14: "14",
		X15: "0",
		X16: "6145395493319860668016347858812770023447391082436850637703433811806758341511",
		X17: "5372639291451818191628987971947498365897136915661242063962020082645469306801",
		X18: "8345064698512194671820687215336905882316691669657975833564912000222358771005",
		X19: "7193178607344504405033547753993836694880653173395268524234673070771134267976",
		X20: "4470461308091089130206224251448025469810378595018440458704326590797798857468",
		X21: "6678246761406175258780843413326922193135114407360689709273849331117234373107",
		X22: "404268763070835680098199600806499381383582390909982678960256342138818824701",
		X23: "7800794953392462079499146387957727784082229373277763367558211409960449038486",
		X24: "3813367346515062057786064786175867430784407238287162962484267606493514556446",
		X25: "103840650972614095218186489191658409275860437069492911412866216372461777589",
		X26: "8379283844860220163200588286960265411268953736637398172518451003624827184815",
		X27: "1185798057684030474461723028914009299616366893216765321233978167021139648151",
		X28: "7103504771694579947117871628393826689850941901823538587067000859551996443317",
		X29: "2809685179282062738493635545329192261563591593943848057921088601367957607774",
		X30: "3439877582322744870714553984007157217861225243070424161034745220887004085255",
	}
	_, innerVK, innerWitness, innerProof = ComputeProofC4(ecc.BLS12_377.ScalarField(), ecc.BW6_761.ScalarField(), assignment4, false)
	//circuit 4 verify proof
	err = groth16.Verify(innerProof, innerVK, innerWitness, stdgroth16.GetNativeVerifierOptions(ecc.BLS12_377.ScalarField(), ecc.BW6_761.ScalarField()))
	if err != nil {
		panic(err)
	}

	//print size of the proof
	var bufcircuit4 bytes.Buffer
	//write the proof to the buffer
	_, err = innerProof.WriteTo(&bufcircuit4)
	if err != nil {
		fmt.Println("Error writing proof to buffer:", err)
		panic(err)
	}
	fmt.Println("Size of the proof: ", bufcircuit4.Len())
	//print separator line
	print("------------------------------------------------\n")
	//circuit 5 compute proof
	print("Circuit 5\n")
	//assignments
	assignment5 := &Circuit5{
		W1:  "1",
		W2:  "2",
		W3:  "3",
		W4:  "4",
		W5:  "5",
		W6:  "6",
		W7:  "7",
		W8:  "8",
		W9:  "9",
		W10: "10",
		W11: "11",
		W12: "12",
		W13: "13",
		W14: "14",
		W15: "0",
		W16: "6145395493319860668016347858812770023447391082436850637703433811806758341511",
		W17: "5372639291451818191628987971947498365897136915661242063962020082645469306801",
		W18: "8345064698512194671820687215336905882316691669657975833564912000222358771005",
		W19: "7193178607344504405033547753993836694880653173395268524234673070771134267976",
		W20: "4470461308091089130206224251448025469810378595018440458704326590797798857468",
		W21: "6678246761406175258780843413326922193135114407360689709273849331117234373107",
		W22: "404268763070835680098199600806499381383582390909982678960256342138818824701",
		W23: "7800794953392462079499146387957727784082229373277763367558211409960449038486",
		W24: "3813367346515062057786064786175867430784407238287162962484267606493514556446",
		W25: "103840650972614095218186489191658409275860437069492911412866216372461777589",
		W26: "8379283844860220163200588286960265411268953736637398172518451003624827184815",
		W27: "1185798057684030474461723028914009299616366893216765321233978167021139648151",
		W28: "7103504771694579947117871628393826689850941901823538587067000859551996443317",
		W29: "2809685179282062738493635545329192261563591593943848057921088601367957607774",
		W30: "3439877582322744870714553984007157217861225243070424161034745220887004085255",
	}
	_, innerVK, innerWitness, innerProof = ComputeProofC5(ecc.BLS12_377.ScalarField(), ecc.BW6_761.ScalarField(), assignment5, false)
	//circuit 5 verify proof
	err = groth16.Verify(innerProof, innerVK, innerWitness, stdgroth16.GetNativeVerifierOptions(ecc.BLS12_377.ScalarField(), ecc.BW6_761.ScalarField()))
	if err != nil {
		panic(err)
	}
	//print size of the proof
	var bufcircuit5 bytes.Buffer
	//write the proof to the buffer
	_, err = innerProof.WriteTo(&bufcircuit5)
	if err != nil {
		fmt.Println("Error writing proof to buffer:", err)
		panic(err)
	}
	fmt.Println("Size of the proof: ", bufcircuit5.Len())
}

func NonRecursive_BN254() {
	print("------------------------------------------------\n")
	print("Curve BN254\n")
	//circuit 1 compute proof
	print("Circuit 1\n")
	//assignments
	assignment1 := &Circuit1{
		X1:  "17910351931180199812861882105709449642850843359390602813041758851296707110869",
		X2:  "17099089350943580386252292303046352502900960708386057022991813653670996392884",
		X3:  "5588992280727076441168461784199521993843604546767119360841699806309863081522",
		W1:  4,
		W2:  20,
		W3:  6,
		W4:  7,
		W5:  8,
		W6:  9,
		W7:  10,
		W8:  11,
		W9:  12,
		W10: 13,
		W11: 14,
		W12: 15,
		W13: 16,
		W14: 17,
		W15: "15228504002629183277700886123866156298254294328121208625788741836971229363435",
		W16: 19,
	}

	_, innerVK, innerWitness, innerProof := ComputeProofC1(ecc.BN254.ScalarField(), ecc.BW6_761.ScalarField(), assignment1, true)
	//circuit 1 verify proof
	err := groth16.Verify(innerProof, innerVK, innerWitness)
	if err != nil {
		panic(err)
	}
	//print size of the proof
	var bufcircuit1 bytes.Buffer
	//write the proof to the buffer
	_, err = innerProof.WriteTo(&bufcircuit1)
	if err != nil {
		fmt.Println("Error writing proof to buffer:", err)
		panic(err)
	}
	fmt.Println("Size of the proof: ", bufcircuit1.Len())
	//print separator line
	print("------------------------------------------------\n")
	//circuit 2 compute proof
	print("Circuit 2\n")
	//assignments
	assignment2_bn254 := &Circuit2_bn254{
		X1: "5403568004985127167595620390598904341637212118724348997646904170368224746549", // Message
		X2: eddsa.PublicKey{
			A: twistededwards.Point{
				X: "1764591548014839922697901742825813508922629826848757849710574340319009360301",
				Y: "5760402717768433200000294615949285760245767850128270466055834653513251238093",
			},
		},
		W1: []byte("Hello, World!"),
		W2: []byte("Hello, World!2"),
		W3: "3",
		W4: eddsa.Signature{
			R: twistededwards.Point{
				X: "17738377311607536093644243230769715704277708620847063504095807171667011705040",
				Y: "2190526852261559738624608120258320187555780856197450368294658080141305785640",
			},
			S: "1806609576049463380952351062581722498055574937886802697144407604916484095220",
		},
		W5: eddsa.Signature{
			R: twistededwards.Point{
				X: "12199127640243477949250542996710960181806925855337407406263128322399869120720",
				Y: "4881042171406765542965317764963439565844216038743323380214134929873588921529",
			},
			S: "2354385165313449018022624501102210672261642291824911668344751528894580564600",
		},
	}

	_, innerVK, innerWitness, innerProof = ComputeProofC2_bn254(ecc.BN254.ScalarField(), assignment2_bn254) //circuit 2 verify proof
	err = groth16.Verify(innerProof, innerVK, innerWitness)
	if err != nil {
		panic(err)
	}
	//print size of the proof
	var bufcircuit2 bytes.Buffer
	//write the proof to the buffer
	_, err = innerProof.WriteTo(&bufcircuit2)
	if err != nil {
		fmt.Println("Error writing proof to buffer:", err)
		panic(err)
	}
	fmt.Println("Size of the proof: ", bufcircuit2.Len())

	//print separator line
	print("------------------------------------------------\n")
	//circuit 3 compute proof
	print("Circuit 3\n")
	//assignments
	assignment3 := &Circuit3{
		X1:  "18045289051299654077710208499747278752099041449041972372412271818361923969579",
		X2:  "9107932689528450144523658529928219418114365814816119700519889196876613321487",
		X3:  "3727849357394847973902373480433416390462964291084350750861377077729442468375",
		X4:  "9305531108149127732001757945772781283045822391320486276226226519068557143487",
		X5:  "3208205682433828782064791596845356795915629668548278213119734691946093314768",
		X6:  "17702992979891271873591285146905629509138327215965724996361509959441812825561",
		X7:  "20827190352347366088402419604113597549769648265894779808401672125985506223920",
		X8:  "2307844461511326954862320559170387395691022672459683250391771136567035303279",
		X9:  "10540474328763783282265633599796189847943293066212851546154674617580716032087",
		X10: "21488126545528900465245011371375368756899880390335832457798151394813541857337",
		X11: "11560315043483734290481528396686439115073110707433439961484615631997145380523",
		X12: "20466671280724276292316047888538707662418925853926569314357170617780657947704",
		X13: "15373420575457586929052011629101393634089527499187216011144849964797839189446",
		X14: "1709519545723250516526115553403803005642167706338576574297687599714725495322",
		X15: "11840325574010461144344578667958879251363355896262439473667609653807577661824",
		W1:  1,
		W2:  2,
		W3:  3,
		W4:  4,
		W5:  5,
		W6:  6,
		W7:  7,
		W8:  8,
		W9:  9,
		W10: 10,
		W11: 11,
		W12: 12,
		W13: 13,
		W14: 14,
		W15: 0,
	}
	_, innerVK, innerWitness, innerProof = ComputeProofC3(ecc.BN254.ScalarField(), ecc.BW6_761.ScalarField(), assignment3, true)
	//circuit 3 verify proof
	err = groth16.Verify(innerProof, innerVK, innerWitness)
	if err != nil {
		panic(err)
	}
	//print size of the proof
	var bufcircuit3 bytes.Buffer
	//write the proof to the buffer
	_, err = innerProof.WriteTo(&bufcircuit3)
	if err != nil {
		fmt.Println("Error writing proof to buffer:", err)
		panic(err)
	}
	fmt.Println("Size of the proof: ", bufcircuit3.Len())

	//print separator line
	print("------------------------------------------------\n")
	//circuit 4 compute proof
	print("Circuit 4\n")
	//assignments
	assignment4 := &Circuit4{
		X1:  "1",
		X2:  "2",
		X3:  "3",
		X4:  "4",
		X5:  "5",
		X6:  "6",
		X7:  "7",
		X8:  "8",
		X9:  "9",
		X10: "10",
		X11: "11",
		X12: "12",
		X13: "13",
		X14: "14",
		X15: "0",
		X16: "18045289051299654077710208499747278752099041449041972372412271818361923969579",
		X17: "9107932689528450144523658529928219418114365814816119700519889196876613321487",
		X18: "3727849357394847973902373480433416390462964291084350750861377077729442468375",
		X19: "9305531108149127732001757945772781283045822391320486276226226519068557143487",
		X20: "3208205682433828782064791596845356795915629668548278213119734691946093314768",
		X21: "17702992979891271873591285146905629509138327215965724996361509959441812825561",
		X22: "20827190352347366088402419604113597549769648265894779808401672125985506223920",
		X23: "2307844461511326954862320559170387395691022672459683250391771136567035303279",
		X24: "10540474328763783282265633599796189847943293066212851546154674617580716032087",
		X25: "21488126545528900465245011371375368756899880390335832457798151394813541857337",
		X26: "11560315043483734290481528396686439115073110707433439961484615631997145380523",
		X27: "20466671280724276292316047888538707662418925853926569314357170617780657947704",
		X28: "15373420575457586929052011629101393634089527499187216011144849964797839189446",
		X29: "1709519545723250516526115553403803005642167706338576574297687599714725495322",
		X30: "11840325574010461144344578667958879251363355896262439473667609653807577661824",
	}
	_, innerVK, innerWitness, innerProof = ComputeProofC4(ecc.BN254.ScalarField(), ecc.BW6_761.ScalarField(), assignment4, true)
	//circuit 4 verify proof
	err = groth16.Verify(innerProof, innerVK, innerWitness)
	if err != nil {
		panic(err)
	}
	//print size of the proof
	var bufcircuit4 bytes.Buffer
	//write the proof to the buffer
	_, err = innerProof.WriteTo(&bufcircuit4)
	if err != nil {
		fmt.Println("Error writing proof to buffer:", err)
		panic(err)
	}
	fmt.Println("Size of the proof: ", bufcircuit4.Len())

	//print separator line
	print("------------------------------------------------\n")
	//circuit 5 compute proof
	print("Circuit 5\n")
	//assignments
	assignment5 := &Circuit5{
		W1:  "1",
		W2:  "2",
		W3:  "3",
		W4:  "4",
		W5:  "5",
		W6:  "6",
		W7:  "7",
		W8:  "8",
		W9:  "9",
		W10: "10",
		W11: "11",
		W12: "12",
		W13: "13",
		W14: "14",
		W15: "0",
		W16: "18045289051299654077710208499747278752099041449041972372412271818361923969579",
		W17: "9107932689528450144523658529928219418114365814816119700519889196876613321487",
		W18: "3727849357394847973902373480433416390462964291084350750861377077729442468375",
		W19: "9305531108149127732001757945772781283045822391320486276226226519068557143487",
		W20: "3208205682433828782064791596845356795915629668548278213119734691946093314768",
		W21: "17702992979891271873591285146905629509138327215965724996361509959441812825561",
		W22: "20827190352347366088402419604113597549769648265894779808401672125985506223920",
		W23: "2307844461511326954862320559170387395691022672459683250391771136567035303279",
		W24: "10540474328763783282265633599796189847943293066212851546154674617580716032087",
		W25: "21488126545528900465245011371375368756899880390335832457798151394813541857337",
		W26: "11560315043483734290481528396686439115073110707433439961484615631997145380523",
		W27: "20466671280724276292316047888538707662418925853926569314357170617780657947704",
		W28: "15373420575457586929052011629101393634089527499187216011144849964797839189446",
		W29: "1709519545723250516526115553403803005642167706338576574297687599714725495322",
		W30: "11840325574010461144344578667958879251363355896262439473667609653807577661824",
	}
	_, innerVK, innerWitness, innerProof = ComputeProofC5(ecc.BN254.ScalarField(), ecc.BW6_761.ScalarField(), assignment5, true)
	//circuit 5 verify proof
	err = groth16.Verify(innerProof, innerVK, innerWitness)
	if err != nil {
		panic(err)
	}
	//print size of the proof
	var bufcircuit5 bytes.Buffer
	//write the proof to the buffer
	_, err = innerProof.WriteTo(&bufcircuit5)
	if err != nil {
		fmt.Println("Error writing proof to buffer:", err)
		panic(err)
	}
	fmt.Println("Size of the proof: ", bufcircuit5.Len())
}
